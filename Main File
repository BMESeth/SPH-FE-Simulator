# -*- coding: utf-8 -*-
"""
Created on Tue Mar 28 12:21:35 2023

@author: Seth Mischo
@DrPupper_RG - Twitter
@DrPupperBME - GitHub

"""

import pygame
import numpy as np
import sys
import random
from sph import SPH
import pygame_gui
from pygame_gui.elements.ui_label import UILabel
from math import cos, sin, radians


# Initialize Pygame
pygame.init()

w = 1024
h = 768

# Define colors
white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0)
#Define collision count
collision_count = 0
# Initialize the Pygame GUI manager
manager = pygame_gui.UIManager((w, h))

# Create the slider
slider_x = 400
slider_y = 30
slider_width = 200
slider_height = 20
slider = pygame_gui.elements.UIHorizontalSlider(
    relative_rect=pygame.Rect(slider_x, slider_y, slider_width, slider_height),
    start_value=0.0,
    value_range=(-0.05, 0),
    manager=manager,
)

label = UILabel(relative_rect=pygame.Rect((slider_x, slider_y - 30), (100, 20)), text="x_force", manager=manager)
value_label = UILabel(relative_rect=pygame.Rect((slider_x + 100, slider_y - 30), (100, 20)), text=str(slider.get_current_value()), manager=manager)

#Creating second slider for rotation of the cylinder
slider_rot_x = 400
slider_rot_y = 70
slider_rot_width = 200
slider_rot_height = 20
slider_rotation = pygame_gui.elements.UIHorizontalSlider(
    relative_rect=pygame.Rect(slider_rot_x, slider_rot_y, slider_rot_width, slider_rot_height),
    start_value=-90.0,
    value_range=(-90.0, 90.0),
    manager=manager,
)

#Create a THIRD slider for more blob fun
blob_slider_x = 400
blob_slider_y = 110
blob_slider_width = 200
blob_slider_height = 20
blob_slider = pygame_gui.elements.UIHorizontalSlider(
    relative_rect=pygame.Rect(blob_slider_x, blob_slider_y, blob_slider_width, blob_slider_height),
    start_value=0.0,
    value_range=(1, 200.0),
    manager=manager,
)

# Add a label for the blob count slider
blob_count_label = pygame_gui.elements.UILabel(
    relative_rect=pygame.Rect(blob_slider_x - 130, blob_slider_y - 5, 130, 20),
    text="SPH count:",
    manager=manager,
)
#Add a switch for turning on and off the blobs
# Add a reset button
reset_button = pygame_gui.elements.UIButton(
    relative_rect=pygame.Rect((slider_x + 250, slider_y - 30), (100, 40)),
    text="Reset All",
    manager=manager,
)
# Add a label for the rotation slider
rotation_label = pygame_gui.elements.UILabel(
    relative_rect=pygame.Rect(slider_rot_x - 80, slider_rot_y - 5, 80, 20),
    text="Rotation:",
    manager=manager,
)
# Set screen dimensions and create a screen
width, height = 800, 600
screen = pygame.display.set_mode((width, height))

#For controlling velocity + color
def velocity_to_color(velocity, max_velocity=1.0):
    norm_velocity = np.linalg.norm(velocity) / max_velocity
    if np.isnan(norm_velocity):
        norm_velocity = 0.1  # Set a default value for norm_velocity when it is NaN
    norm_velocity = min(max(norm_velocity, 0.0), 0.25)
    color = (int(255 * norm_velocity), 0, int(255 * (1 - norm_velocity)))
    return color
#@Create cylinders & Define Cyl class
class TaperedCylinder:
    def __init__(self, pos, height, top_radius, bottom_radius):
        self.pos = pos
        self.height = height
        self.top_radius = top_radius
        self.bottom_radius = bottom_radius
        self.angle = 0
        self.points = np.array([
            [self.pos[0] - self.top_radius, self.pos[1]],
            [self.pos[0] + self.top_radius, self.pos[1]],
            [self.pos[0] + self.bottom_radius, self.pos[1] + self.height],
            [self.pos[0] - self.bottom_radius, self.pos[1] + self.height]
        ])
        self.original_points = self.points.copy()
        self.center = np.array([self.pos[0], self.pos[1] + self.height / 2])
    def set_angle(self, angle):
        self.angle = angle
        rotation_matrix = np.array([
            [np.cos(self.angle), -np.sin(self.angle)],
            [np.sin(self.angle), np.cos(self.angle)]
        ])
        translated_points = self.original_points - self.center
        rotated_points = np.dot(translated_points, rotation_matrix)
        self.points = rotated_points + self.center
    def rotate(self, angle):
        self.angle = angle
        rotation_matrix = np.array([
            [np.cos(np.radians(self.angle)), -np.sin(np.radians(self.angle))],
            [np.sin(np.radians(self.angle)), np.cos(np.radians(self.angle))]
        ])
    
        rotated_points = []
        for point in self.original_points:
            relative_point = point - self.center
            rotated_point = np.matmul(rotation_matrix, relative_point) + self.center
            rotated_points.append(rotated_point)
        self.points = np.array(rotated_points)

#Now draw it
    def draw(self, surface):
        pygame.draw.polygon(surface, (255, 0, 0), [
            (int(self.points[0][0]), int(self.points[0][1])),
            (int(self.points[1][0]), int(self.points[1][1])),
            (int(self.points[2][0]), int(self.points[2][1])),
            (int(self.points[3][0]), int(self.points[3][1])),
        ])
cylinder = TaperedCylinder(pos=np.array([width / 2, height / 2]), height=250, top_radius=10, bottom_radius=30)
max_speed = 500 #Edge case bug fix for max_speed
# Define Blob class
class Blob:
    def __init__(self, x, y, vx, vy, radius):
        self.x = x
        self.y = y
        self.vx = vx
        self.vy = vy
        self.radius = radius
    def move(self, x_force=0):
        # Calculate gravitational force pulling blobs into a streamline/wake
        # Gravity removed due to errors in code
        self.x += self.vx
        self.y += self.vy
        #Edge case where NaN due to zero point float
        if np.isnan(self.x) or np.isnan(self.y):
            self.x = x-1
            self.y = y-1
            self.vx = vx-0.01
            self.vy = vy-0.01
#            print('Error noted and corrected')
# ^ Use the above line to notice breaks in code
        #Add x_force to blob x velocity
        self.vx += x_force
        #Check if left boundary is hit
        if self.x - self.radius <= 0:
            self.x = random.uniform(width - 50, width - 20)
            self.y = random.uniform(1, height - 10)
            self.vx = random.uniform(0, 2)
            self.vy = random.uniform(-0.1, 0.1)
        elif self.x + self.radius >= width:
            self.vx = -self.vx
        if self.y - self.radius <= 0 or self.y + self.radius >= height:
            self.vy = -self.vy
        # Check for collision with cylinder
        for i in range(4):
            p1 = cylinder.points[i]
            p2 = cylinder.points[(i + 1) % 4]

            line_vec = p2 - p1
            blob_vec = np.array([self.x, self.y]) - p1

            projection = np.dot(blob_vec, line_vec) / np.dot(line_vec, line_vec)
            projection = np.clip(projection, 0, 1)

            closest_point = p1 + projection * line_vec
            distance = np.linalg.norm(closest_point - np.array([self.x, self.y]))

            if distance <= self.radius:
                self.vx = -self.vx
                self.vy = -self.vy
                break
    def collide_with_blob(self, other):
        global collision_count
        dx = other.x - self.x
        dy = other.y - self.y
        distance = np.hypot(dx, dy)
        total_radius = self.radius + other.radius
        if distance < total_radius:
            collision_count += 1
        if distance < total_radius:
            angle = np.arctan2(dy, dx)
            sin = np.sin(angle)
            cos = np.cos(angle)

            # Rotate velocities to simplify collision response
            self_rotated_vx = cos * self.vx + sin * self.vy
            self_rotated_vy = -sin * self.vx + cos * self.vy
            other_rotated_vx = cos * other.vx + sin * other.vy
            other_rotated_vy = -sin * other.vx + cos * other.vy

            # Swap x velocities
            self_rotated_vx, other_rotated_vx = other_rotated_vx, self_rotated_vx

            # Rotate back
            self.vx = cos * self_rotated_vx - sin * self_rotated_vy
            self.vy = sin * self_rotated_vx + cos * self_rotated_vy
            other.vx = cos * other_rotated_vx - sin * other_rotated_vy
            other.vy = sin * other_rotated_vx + cos * other_rotated_vy

            # Move blobs so they don't overlap
            overlap = total_radius - distance + 1
            self.x += cos * (overlap / 2)
            self.y += sin * (overlap / 2)
            other.x -= cos * (overlap / 2)
            other.y -= sin * (overlap / 2)
    def draw(self, surface):
        arrow_length = 10
        angle = np.arctan2(self.vy, self.vx)
        base_angle1 = angle - np.pi / 6
        base_angle2 = angle + np.pi / 6

        arrow_head = (self.x + self.radius * np.cos(angle), self.y + self.radius * np.sin(angle))
        arrow_base1 = (self.x - arrow_length * np.cos(base_angle1), self.y - arrow_length * np.sin(base_angle1))
        arrow_base2 = (self.x - arrow_length * np.cos(base_angle2), self.y - arrow_length * np.sin(base_angle2))

        velocity = np.sqrt(self.vx ** 2 + self.vy ** 2)
        color = velocity_to_color(velocity)

        pygame.draw.polygon(surface, color, [arrow_head, arrow_base1, arrow_base2])
    def reset_blobs():
        global blobs, num_blobs
        blobs = []
        num_blobs = int(blob_slider.get_current_value())
        blob_count_label.set_text(f"{num_blobs} SPH")
        collision_count = 0
        for _ in range(num_blobs):
            x = random.uniform(550, width - 20)
            y = random.uniform(1, height - 1)
            vx = random.uniform(-2, 2)
            vy = random.uniform(-2, 2)
            radius = random.uniform(4, 5)
            blobs.append(Blob(x, y, vx, vy, radius))
    def update_velocity(self, dt, fluid_velocity_func):
        x, y = int(self.x), int(self.y)
        
        # Clamp x and y within the valid range
        x = max(min(x, width), 1)
        y = max(min(y, height - 1), 1)

        self.vx += u_x
        self.vy += u_y

        # Limit the maximum velocity
        speed = np.sqrt(self.vx ** 2 + self.vy ** 2)
        if speed > max_speed:
            self.vx = max_speed * self.vx / speed
            self.vy = max_speed * self.vy / speed
#Define Lattice Boltzmann Equation
#This first part is to validate the matrix
operand1 = np.random.rand(2, 9)
operand2 = np.random.rand(2, 580, 780)

# Add newaxis to operand1 to make it broadcastable with operand2
operand1 = operand1[:, :, np.newaxis, np.newaxis]
operand2 = operand2[:, np.newaxis, :, :]
# Apply einsum with the updated operand1
class LatticeBoltzmann: #This is Boltzmann eq via a lattice
    def __init__(self, width, height, viscosity, relaxation_time):
        self.width = 600
        self.height = 800
        self.viscosity = viscosity
        self.relaxation_time = relaxation_time
        self.init_lattice()
        self.init_weights()
        self.force = force
    def initialize(self):
        # Initialize density field + fluid velocity (rho + u)
        self.f = self.equilibrium(self.rho, self.u)        
    def init_lattice(self):
        self.weights = np.array([4/9, 1/9, 1/9, 1/9, 1/9, 1/36, 1/36, 1/36, 1/36])
        self.c = np.array([[0, 1, 0, -1, 0, 1, -1, -1, 1], [0, 0, 1, 0, -1, 1, 1, -1, -1]])

        self.rho = np.ones((height, width))
        self.u = np.zeros((2, height, width))
        self.f = np.zeros((9, height, width))
        self.fe = np.zeros((9, height, width))

    def init_weights(self):
        pass

    def equilibrium(self, rho, u):
        cu = np.tensordot(self.c, u, axes=([0], [0]))
        usqr = np.einsum('ijk,ijk->jk', u, u) / 2
        fe = np.zeros_like(self.f)
        for i in range(9):
            fe[i] = self.weights[i] * rho * (1 + 3 * cu[i] + 4.5 * cu[i] ** 2 - 1.5 * usqr)
        return fe
    
    def collide(self): #Collision
        self.fe = self.equilibrium(self.rho, self.u)
        self.f += (1.0 / self.viscosity) * (self.fe - self.f)

    def stream(self): #Streamline
        for i in range(9):
            self.f[i] = np.roll(np.roll(self.f[i], self.c[0, i], axis=1), self.c[1, i], axis=0)
            
    def macroscopic(self):
        self.rho = np.sum(self.f, axis=0)
        self.u = np.tensordot(self.c, self.f, axes=([1], [0])) / self.rho[np.newaxis, :, :]
        
    def apply_force(self):
        self.u[0, :, :self.width // 2] += self.force
        
    def update(self):
        # Update fluid velocity & density field
        self.collide()
        self.stream()
        self.macroscopic()
        self.apply_force()
        
    def get_velocity(self, x, y):
        # Return the fluid velocity
        return self.u[:, y, x]
    
# Create random blobs
num_blobs = 100
blobs = []
for _ in range(num_blobs):
    x = random.uniform(550, width - 20)
    y = random.uniform(1, height - 1)
    vx = random.uniform(0, -5)
    vy = random.uniform(-0.1, 0.1)
    radius = random.uniform(4, 5)
    blobs.append(Blob(x, y, vx, vy, radius))

x_force = 0.01
rotation_angle = 0
viscosity = 0.02
force = 0.0005
lbm = LatticeBoltzmann(width, height, viscosity=1.48E-5, relaxation_time=0.8)
# Main loop
running = True
font = pygame.font.Font(None, 24)
while running:
    time_delta = pygame.time.Clock().tick(60) / 1000.0

    screen.fill(black)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            break
        if event.type == pygame.USEREVENT:
            if event.user_type == pygame_gui.UI_BUTTON_PRESSED:
                if event.ui_element == reset_button:
                    Blob.reset_blobs()
                    collision_count = 0
            if event.user_type == pygame_gui.UI_HORIZONTAL_SLIDER_MOVED:
                if event.ui_element == slider:
                    x_force = event.value
                    value_label.set_text(f"{x_force:.2f} kN")
                elif event.ui_element == slider_rotation:
                    rotation_angle = event.value
                    rotation_label.set_text(f"{rotation_angle:.2f} Degrees")
                    cylinder.rotate(rotation_angle)
            if event.user_type == pygame_gui.UI_HORIZONTAL_SLIDER_MOVED:
                if event.ui_element == blob_slider:
                    Blob.reset_blobs()
                    collision_count = 0
        manager.process_events(event)
    lbm.update()
    for blob in blobs:
        x, y = int(blob.x), int(blob.y)
        u_x, u_y = lbm.get_velocity(x, y)
        # Pass the event to the GUI manager
    # Draw the collision counter
    collision_text = font.render(f"Collisions: {collision_count}", True, white)
    screen.blit(collision_text, (10, 10))
    for blob in blobs:
        blob.move(x_force)  # Pass the cylinder and X-direction force as arguments
        blob.draw(screen)
        blob.update_velocity(x,y)
    for i, blob1 in enumerate(blobs):
        for blob2 in blobs[i + 1:]:
            blob1.collide_with_blob(blob2)
    cylinder.draw(screen)  # Draw the cylinder
    manager.update(time_delta)  # Update the GUI
    manager.draw_ui(screen)  # Draw the GUI

    pygame.display.flip()
    pygame.time.delay(20)

pygame.quit()
sys.exit()
